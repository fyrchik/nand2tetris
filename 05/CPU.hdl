// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16 (a=outaddr, b=inM, sel=instruction[12], out=outreg);

    And (a=instruction[15], b=instruction[14], out=c1);
    And (a=c1, b=instruction[13], out=iscompute);

    ALU (x=outd, y=outreg,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluout, zr=aluzr, ng=alung);

    // If instruction[5] and it is compute, store in A.
    Mux16 (a=instruction, b=aluout, sel=instruction[15], out=inaddr);
    Not (in=instruction[15], out=isaddr);
    Or (a=instruction[5], b=isaddr, out=staddr);
    ARegister (in=inaddr, load=staddr, out=outaddr);

    // If instruction[4] and it is compute, store in D.
    And (a=instruction[4], b=instruction[15], out=loadd);
    DRegister (in=aluout, load=loadd, out=outd);

    // If instruction[3] and it is compute, store in M.
    And (a=instruction[3], b=instruction[15], out=writeM);
    And16 (a=aluout, b=true, out=outM);
    And16 (a=outaddr, b=true, out[0..14]=addressM);

    And (a=instruction[2], b=alung, out=jl);
    And (a=instruction[1], b=aluzr, out=jz);
    Or (a=alung, b=aluzr, out=alunps);
    Not (in=alunps, out=alups);
    And (a=instruction[0], b=alups, out=jg);

    Or (a=jl, b=jz, out=j1);
    Or (a=j1, b=jg, out=anyjmp);
    And (a=anyjmp, b=instruction[15], out=jmpload);
    Not (in=jmpload, out=jmpnotload);
    Or (a=isaddr, b=jmpnotload, out=jmpinc);

    PC (in=outaddr, load=jmpload, inc=jmpinc, reset=reset, out[0..14]=pc);
}